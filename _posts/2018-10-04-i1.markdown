---
layout: post
title:  "Insight 1: .NET framework"
date:   2018-10-04 14:21:21 +0200
categories:
  - statistics
  - insight
---
<img src="/assets/dotnet.png" width="300"/>

The .NET framework is a software development framework from Microsoft. It provides a controlled programming environment where software can be developed, installed and executed on Windows-based operating systems.

The principal design features are:

**Interoperability**: This allows for .NET-developed programs to access functionalities in programs developed outside .NET.

**Common Runtime Engine**: Also known as the common language runtime, this allows programs developed in .NET to exhibit common behaviors in memory usage, exception handling and security.

**Language Independence**: Common language infrastructure specifications (CLI) allow for the exchange of data types between two programs developed in different languages.

**Base Class Library**: A library of code for most common functions--used by programmers to avoid repetitive rewriting of code.

**Ease of Deployment**: There are tools to ensure the ease of installing programs without interfering with previously installed applications.

**Security**: Programs developed in .NET are based on a common security model.

Let's take an overview on two of most used programming language on top of _.NET framework_: *C#* and *VB*

### C# and Visual Basic


from a syntactical stand of point they're definitely unequal, it is possible to find plenty of examples of the differences
at https://www.harding.edu/fmccown/vbnet_csharp_comparison.html but from practical
point of view they goes on the same way compiling to the same intermediate language, both runs on .NET framework and because of that there aren't performance consideration to do. Those "features" allows programmatically to translate a
program written in a language to other.
Imho there aren't many consideration to do about paradigms they support since
they don't have once fixed and are part of so called "multi-paradigm languages".
The main reason of usage of C# and VB are that people are friendly with Windows
thats the most used operating system and the IDE (Visual Studio) provided by microsoft to develop with their languages is intuitive for newbes.
The framework carries out the point that it works only
on windows operating systems and that's definitely bad. In a world where large part of real
stable and most useful applications run on linux-like operating system, that's matter. Moreover, since the [12factor]: https://12factor.net/ "12factor" took the
scene on DevOps (that implies the usage of containers such i.e. Docker that works
  running linux syscalls), personally I would avoid to build my service on top of it.
